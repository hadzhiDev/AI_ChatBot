# Generated by Django 5.2 on 2025-05-01 13:41

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chatbot', '0004_messanger_unique_dashboard_messanger_type_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_chat_id', models.BigIntegerField(blank=True, null=True)),
                ('whatsapp_chat_id', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('username', models.CharField(blank=True, max_length=200, null=True)),
                ('is_bot', models.BooleanField(default=False)),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clients', to='chatbot.dashboard')),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('instagram', 'Instagram'), ('telegram', 'Telegram'), ('whatsapp', 'Whatsapp')], max_length=100)),
                ('whatsapp_chat_id', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('dashboard', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chats', to='chatbot.dashboard')),
                ('client', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chat', to='chatbot.client')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=500)),
                ('sender_info', models.JSONField(blank=True, null=True)),
                ('is_opened', models.BooleanField(default=False)),
                ('outgoing', models.BooleanField(default=False)),
                ('ai_assistant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messages', to='chatbot.aiassistant')),
                ('chat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chatbot.chat')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chatbot.client')),
            ],
        ),
        migrations.CreateModel(
            name='Messenger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('messenger_type', models.CharField(choices=[('instagram', 'Instagram'), ('telegram', 'Telegram'), ('whatsapp', 'Whatsapp')], max_length=100)),
                ('id_instance', models.CharField(blank=True, help_text='Not necessary if messanger type is Instagram or Telegram', max_length=100, null=True)),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messangers', to='chatbot.dashboard')),
            ],
        ),
        migrations.AddField(
            model_name='chat',
            name='messenger',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chats', to='chatbot.messenger'),
        ),
        migrations.DeleteModel(
            name='Messanger',
        ),
        migrations.AddConstraint(
            model_name='messenger',
            constraint=models.UniqueConstraint(fields=('dashboard', 'messenger_type'), name='unique_dashboard_messenger_type'),
        ),
        migrations.AddConstraint(
            model_name='messenger',
            constraint=models.UniqueConstraint(fields=('messenger_type', 'token'), name='unique_messenger_type_token'),
        ),
    ]
